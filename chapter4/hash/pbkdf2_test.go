package hash

import (
	"bytes"
	"fmt"
	"testing"
)

const testPass = "hello, world"

var refSalt = []byte{
        0xe9, 0x6e, 0x1d, 0x88, 0xc6, 0xbb, 0x34, 0x73, 
        0x2d, 0xfb, 0x3c, 0xe4, 0x88, 0x38, 0xe3, 0xbf, 
        0x2c, 0x77, 0x4a, 0x13, 0xa1, 0x76, 0xac, 0x75, 
        0x25, 0xdb, 0x37, 0xe7, 0x09, 0xd5, 0xa1, 0xc8, 
        0x71, 0xd5, 0xb7, 0x7d, 0x38, 0x5a, 0x32, 0xef, 
        0x00, 0x5a, 0xd0, 0xb5, 0xd6, 0xb9, 0xcd, 0xd7, 
        0x7f, 0xca, 0xa5, 0xb8, 0x13, 0xbe, 0x54, 0xe1, 
        0xd6, 0x6a, 0xfd, 0xf6, 0x8e, 0x20, 0xd3, 0x9c, 
        0xc1, 0x8d, 0x1f, 0x31, 0x23, 0xf9, 0xed, 0x85, 
        0xc4, 0xc5, 0xd0, 0x5e, 0x21, 0xdb, 0x32, 0xef, 
        0x9b, 0x23, 0x16, 0x84, 0xa2, 0x13, 0x77, 0x83, 
        0x03, 0x70, 0xb1, 0x12, 0x6f, 0x36, 0x2a, 0xab, 
        0x4e, 0x5d, 0x71, 0xd1, 0x56, 0xaf, 0x07, 0xda, 
        0xad, 0x3e, 0xfc, 0x55, 0x07, 0xa5, 0x24, 0xfb, 
        0x8e, 0x4b, 0x07, 0x35, 0x48, 0x7e, 0x2a, 0x9c, 
        0xdf, 0x53, 0x46, 0x34, 0x86, 0xb9, 0xdb, 0x3c, 
}
var refHash = []byte{
        0x3a, 0x5b, 0x0f, 0x69, 0xa7, 0x5f, 0x68, 0xd4, 
        0x95, 0x07, 0xcf, 0x5a, 0x65, 0xe8, 0xe5, 0x34, 
        0xc4, 0xa4, 0xd6, 0x3b, 0x3c, 0xc4, 0xa5, 0x95, 
        0xbd, 0xf1, 0xa0, 0x74, 0x78, 0xc0, 0x35, 0x28,
}
var refPH = &PasswordKey{refHash, refSalt}

func TestHashPasswordWithSalt(t *testing.T) {
	pk := DeriveKeyWithSalt(testPass, refSalt)
	if !bytes.Equal(pk.Key, refHash) {
		fmt.Println("failed")
		fmt.Println("[!] hashes do not match")
		t.FailNow()
	} else if !bytes.Equal(pk.Salt, refSalt) {
		fmt.Println("[!] salts do not match")
		t.FailNow()
	}
}

func TestMatchPassword(t *testing.T) {
	pk := DeriveKey(testPass)
	if !MatchPassword(testPass, pk) {
		fmt.Println("[!] password match failed when it should have passed")
		t.FailNow()
	}
}

func TestEnsureFails(t *testing.T) {
	if MatchPassword("hello world", refPH) {
		fmt.Println("[!] authentication should not have succeeded!")
		t.FailNow()
	}
}

func TestEmptyPassFails(t *testing.T) {
	if MatchPassword("", refPH) {
		fmt.Println("[!] authentication should not have succeeded!")
		t.FailNow()
	}
}

func BenchmarkHashPassword(b *testing.B) {
	for i := 0; i < b.N; i++ {
		DeriveKey(testPass)
	}
}
